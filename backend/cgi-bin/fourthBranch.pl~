#!/usr/bin/perl -w
# TODO: prepared mysql statments
use warnings;
use CGI::Carp 'fatalsToBrowser';
use CGI qw/:standard/;
use Cwd qw(cwd abs_path);
use File::Basename 'dirname';
use JSON::PP qw(encode_json decode_json);
use lib dirname(abs_path $0);
use strict;
# Database info
# user - goballScript
# pass - goballScript

# Individual Users
# --- First 
# --- Last
# --- Username
# --- BirthDate
# --- Gender
# --- Address
# --- City
# --- State
# --- Zip
# --- Email
# --- Password
# --- Political_Affiliation
my $CREATE_INDIVIDUAL_USERS_TABLE ="create table individuals ( id MEDIUMINT NOT NULL UNIQUE AUTO_INCREMENT, first_name VARCHAR(50) NOT NULL UNIQUE , last_name VARCHAR(50) NOT NULL,username VARCHAR(30) NOT NULL, birthdate DATE NOT NULL,gender CHAR(1), address VARCHAR(200), city VARCHAR(200), state VARCHAR(100), zip MEDIUMINT,email VARCHAR(100),password VARCHAR(100), political_affiliation VARCHAR(30), PRIMARY KEY (id));";

# Organization Users
# --- Name 
# --- Address
# --- City
# --- State
# --- Zip
# --- Phone
# --- Legal Status
# --- cause_concerns
# --- join_reason
my $CREATE_ORGANIZATION_USERS_TABLE ="create table organizations ( id MEDIUMINT NOT NULL UNIQUE AUTO_INCREMENT, name VARCHAR(50) NOT NULL UNIQUE, address VARCHAR(200), city VARCHAR(200), state VARCHAR(100), zip MEDIUMINT,phone VARCHAR(100),legal_status VARCHAR(100), cause_concerns VARCHAR(30),join_reason VARCHAR(500),individual_name VARCHAR(300), title_in_organization VARCHAR(300), personal_phone VARCHAR(20), email VARCHAR(40), PRIMARY KEY (id));";


use DBI;
###########################
# Main
my $VERSION_NUMBER = 1.0;
my $curDir = cwd();
my $cgiQuery = CGI->new();
my $hostname = `hostname`;
my $dbh;
if($hostname =~ /spooky-Laptop/){
    $dbh = DBI->connect('dbi:mysql:fourthbranch;'."mysql_read_default_file=$curDir/mysql.conf",'root','root') or die "Connection Error: $DBI::errstr\n";
}
else{
    $dbh = DBI->connect('DBI:mysql:database=fourthbranch;host=fourthbranch.db.9192271.hostedresource.com;' ."mysql_read_default_file=$curDir/mysql.conf",'fourthbranch','G0tnerds!') or die "Connection Error: $DBI::errstr\n";
}
my @tables = ( $CREATE_INDIVIDUAL_USERS_TABLE, $CREATE_ORGANIZATION_USERS_TABLE);

my @table_names = ("individuals", "organizations");

#print header('text/html');
#print start_html('goball_api');
#&printEnvironmentVariables();

&commandLineToHtmlEncoded();
print "[";# Start the json array
my $function = param('run');
if($function eq 'version'){
    print $VERSION_NUMBER
}
elsif($function eq 'addOrganization'){
# Organization Users
# --- Legal Status
# --- cause_concerns
# --- join_reason
    my $name = param('name');
    my $address = param('address');
    my $city = param('city');
    my $state = param('state');
    my $zip = param('zip');
    my $phone = param('phone');
    my $legal_status = param('legalstatus');
    my $cause_concerns = param('cause');
    my $join_reason = param('joinreason');
    my $individual_name = param('individualname');
    my $title_in_organization = param('titleorganization');
    my $personal_phone = param('personalphone');
    my $email = param('email');
    if(defined($name) && defined($address) && defined($city) && defined($state) && defined($zip) && defined($phone) && defined($legal_status) && defined($cause_concerns) && defined($join_reason) && defined($individual_name) && defined($title_in_organization) && defined($personal_phone) && defined($email)){
	my $organizationExists = &getOrganizationNameExists($name);
	if($organizationExists == 0){
	    my $result = &addOrganization($name,$address,$city,$state,$zip,$phone,$legal_status,$cause_concerns, $join_reason,$individual_name,$title_in_organization,$personal_phone,$email);
	    my %resultOut = ('successful' => $result);
	    print encode_json(\%resultOut);
	}
	else{
	    my %result = ('successful' => 'false',
			  'name_taken' => 'true');
	    print encode_json(\%result);
	}
	
    }
    else{
	&paramCheck($name,$address,$city,$state,$zip,$phone,$legal_status,$cause_concerns,$join_reason);
    }
}
elsif($function eq 'addIndividual'){

    my $first = param('first'); 
    my $last = param('last');
    my $username = param('username');
    my $birthDate = param('birthdate');
    my $gender = param('gender');
    my $address = param('address');
    my $city = param('city');
    my $state = param('state');
    my $zip = param('zip');
    my $email = param('email');
    my $password = param('password');
    my $affiliation = param('affiliation');
    if(defined($first) && defined($last) && defined($username) && defined($birthDate) && defined($gender) && defined($address) && defined($city) && defined($state) && defined($zip) && defined($email) && defined($password) && defined($affiliation)){
	my $userNameExists = &getUserNameExists($username);
	if($userNameExists == 0){
	    my $result = &addIndividual($first,$last,$username,$birthDate,$gender,$address,$city,$state,$zip,$email,$password, $affiliation);
	    my %resultOut = ('successful' => $result);
	    print encode_json(\%resultOut);
	}
	else{
	    my %result = ('successful' => 'false',
			  'name_taken' => 'true');
	    print encode_json(\%result);
	}
    }
    else{
	&paramCheck($first,$last,$username,$birthDate,$gender,$address,$city,$state,$zip,$email,$password,$affiliation);
    }
}
elsif($function eq 'getIndividualNameExists'){
    my $userName = param('name');
    if(!($userName == undef)){
	&getIndividualNameExists($userName);
    }
}
elsif($function eq 'getIndividualById'){
    my $userId = param('individualid');
    if(!($userId == undef)){
	&getIndividualById($userId);
    }
}
elsif($function eq 'getOrganizationNameExists'){
    my $userName = param('name');
    if(defined($userName)){
	&getOrganizationNameExists($userName);
    }
}
elsif($function eq 'getOrganizationById'){
    my $userId = param('organizationid');
    if(defined($userId)){
	&getOrganizationById($userId);
    }
}
elsif($function eq 'install'){
    &dropBackendTables();
    &createBackendTables();
}
#&loadTestData();

print "]"; # print end of json array
#print end_html();
$dbh->disconnect;
########################
########################
# Functions
sub createBackendTables{
    for my $index (@tables){
	my $sql = $index; 
	print "Execute -->$sql\n\n";
	my $sth = $dbh->prepare($sql);
	$sth->execute or die "Create Backend Tables: SQL Error: $DBI::errstr\n";
    }
}

sub dropBackendTables{
    for my $table (@table_names){
	my $sql = "DROP TABLE IF EXISTS ".$table.";";
	print "Execute -->$sql\n\n";
	my $sth = $dbh->prepare($sql);
	$sth->execute or die "Drop Backend Tables: SQL Error: $DBI::errstr\n"; 
    }
    print "Tables dropped\n";
}

sub addOrganization{
    my $name = $_[0];
    my $address = $_[1];
    my $city = $_[2];
    my $state = $_[3];
    my $zip = $_[4];
    my $phone = $_[5];
    my $legal_status = $_[6];
    my $cause_concerns = $_[7];
    my $join_reason = $_[8];
    my $individual_name = $_[9];
    my $title_in_organization = $_[10];
    my $personal_phone = $_[11];
    my $email = $_[12];
    my $sql = "INSERT INTO organizations (name, address, city, state, zip,phone,legal_status, cause_concerns,join_reason,individual_name,title_in_organization, personal_phone, email) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);";
    my $sth = $dbh->prepare($sql);
    $sth->execute($name,$address,$city,$state,$zip,$phone,$legal_status,$cause_concerns,$join_reason,$individual_name,$title_in_organization,$personal_phone,$email) or warn "Add Organization: SQL Error: $DBI::errstr\n" && return 'false';
    return 'true';
}

sub addIndividual{
    my $first = $_[0];
    my $last = $_[1];
    my $username = $_[2];
    my $birthDate = $_[3];
    my $gender = $_[4];
    my $address = $_[5];
    my $city = $_[6];
    my $state = $_[7];
    my $zip = $_[8];
    my $email = $_[9];
    my $password = $_[10];
    my $affiliation = $_[11];
    my $sql = "INSERT INTO individuals (first_name,last_name,username, birthdate,gender, address , city, state, zip ,email,password, political_affiliation) VALUES (?,?,?,?,?,?,?,?,?,?,?,?);";
    my $sth = $dbh->prepare($sql);
    $sth->execute($first,$last,$username,$birthDate,$gender,$address,$city,$state, $zip,$email,$password,$affiliation) or warn "Add Individual: SQL Error: $DBI::errstr\n" && return 'false';
    return 'true';
}


sub getOrganizationNameExists{
    my $name = $_[0];
    my $columns = "address";
    my $sql = "SELECT ".$columns." FROM organizations where name=?;";
    my $sth = $dbh->prepare($sql);
    $sth->execute($name) or die "getOrganizationNameExists: SQL Error: $DBI::errstr\n";
    my $rows_retrieved = $sth->rows;
    my @row = $sth->fetchrow_array();
    $sth->finish();
    if(@row != 0){
	return 1;
    }
    return 0;
}


sub getUserNameExists{
    my $name = $_[0];
    my $columns = "address";
    my $sql = "SELECT ".$columns." FROM individuals where username=?;";
    my $sth = $dbh->prepare($sql);
    $sth->execute($name) or die "getIndividualNameExists: SQL Error: $DBI::errstr\n";
    my $rows_retrieved = $sth->rows;
    my @row = $sth->fetchrow_array();
    $sth->finish();
    if(@row != 0){
	return 1;
    }
    return 0;
}

sub getOrganizationById{
    my $id = $_[0];
    my $columns = "name, address, city, state, zip,phone,legal_status, cause_concerns,join_reason";
    my $sql = "SELECT ".$columns." FROM organizations where id=?;";
    my $sth = $dbh->prepare($sql);
    $sth->execute($id) or die "getOrganizationById: SQL Error: $DBI::errstr\n";
    my $rows_retrieved = $sth->rows;
    my $printRowBreak = 0;
    while(my @row = $sth->fetchrow_array){
	if($printRowBreak == 1){
	    print ","
	}
	$printRowBreak = 1;
	my ($name, $address, $city, $state, $zip,$phone,$legal_status, $cause_concerns,$join_reason) = @row;
	my %result = ('name' => $name,
		   'address' => $address,
		   'city' => $city,
		   'state' => $state,
		   'zip' => $zip,
	           'phone' => $phone,
	           'legalstatus' => $legal_status,
	           'cause_concerns' => $cause_concerns,
	           'join_reason' => $join_reason);
	print encode_json(\%result);
    }   
}

sub getIndividualById{
    my $id = $_[0];
    my $columns = "first_name,last_name,username, birthdate,gender, address , city, state, zip ,email,password, political_affiliation";
    my $sql = "SELECT ".$columns." FROM organizations where id=?;";
    my $sth = $dbh->prepare($sql);
    $sth->execute($id) or die "getOrganizationById: SQL Error: $DBI::errstr\n";
    my $rows_retrieved = $sth->rows;
    my $printRowBreak = 0;
    while(my @row = $sth->fetchrow_array){
	if($printRowBreak == 1){
	    print ","
	}
	$printRowBreak = 1;
	my ($first_name,$last_name,$username, $birthdate,$gender, $address , $city, $state, $zip ,$email,$password, $political_affiliation) = @row;
	my %result = ('first_name' => $first_name,
		      'last_name' => $last_name,
		      'username' => $username,
		      'birthdate' => $birthdate,
		      'gender' => $gender,
		      'address' => $address ,
		      'city' => $city,
		      'state' => $state,
		      'zip' => $zip ,
		      'email' => $email,
		      'password' => $password, 
		      'affiliation' => $political_affiliation);
	print encode_json(\%result);
    }   
}



sub commandLineToHtmlEncoded{
    for(my $index=0; $index<@ARGV;$index++){
	if($ARGV[$index] =~ /(.*)=(.*)/){
	    my $key = $1;
	    my $value = $2;
	    $value =~ s/'"//g;
	    $cgiQuery->param(-name=>"$key",-value=>"$value");
	}
    }
}
sub loadTestData{
    my $curDir = cwd();
    my @tableFiles = (
	[$curDir."/testData/parks.csv","parks"],
	[$curDir."/testData/users.csv","users"],
	[$curDir."/testData/forum.csv","forum"],
	[$curDir."/testData/friends.csv","friends"],
	[$curDir."/testData/pickup_games.csv","pickup_games"],
	[$curDir."/testData/reviews.csv","reviews"]
	);
    for(my $index = 0; $index < @tableFiles;$index++){
	my $fileName = $tableFiles[$index][0];
	my $tableName = $tableFiles[$index][1];
	my $sql = "LOAD DATA LOCAL INFILE '".$fileName."' INTO TABLE ".$tableName.
	    " FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n' ".
	    "IGNORE 1 LINES;";
	print $sql."\n";
	my $sth = $dbh->prepare($sql);
	$sth->execute or die "Get Load Test Data: SQL Error: $DBI::errstr\n";
    }

    
}


sub printEnvironmentVariables{
    print "<pre>\n";

    foreach my $key (sort keys(%ENV)) {
	print "$key = $ENV{$key}<p>";
    }
    print "</pre>\n";
}

sub paramCheck{
    my $index = 0;
    foreach my $param (@_){
	if(!defined($param)){
	    print "$index is not defined";
	}
	$index++;
    }
}
