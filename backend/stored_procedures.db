DELIMITER $$
DROP PROCEDURE IF EXISTS getBillByCode$$
CREATE PROCEDURE getBillByCode ( IN code CHAR(40) ) 
BEGIN 
SELECT title,status,url,code,open FROM bills
WHERE code = bill_code;
END  $$

DROP PROCEDURE IF EXISTS updateBillStatus$$ 
CREATE PROCEDURE updateBillStatus ( IN updatedStatus CHAR(50) ) 
BEGIN 
UPDATE bills SET status = updatedStatus 
WHERE code = bill_code;
END  $$

DROP PROCEDURE IF EXISTS insertBill$$ 
CREATE PROCEDURE insertBill ( IN title TEXT , IN status VARCHAR(50) , IN url TEXT , IN code VARCHAR(50) , IN local_html TEXT , IN open VARCHAR(5) , IN local_json TEXT , IN local_xml TEXT , IN isLargeBill CHAR(1) , IN isAppropiationBill CHAR(1) ) 
BEGIN 
INSERT INTO bills (local_json,title,code,local_xml,local_html,status,url,isAppropiationBill,open,isLargeBill) VALUES (local_json , title , code , local_xml , local_html , status , url , is_appropiation_bill , open , is_large_bill) ;
END $$

DROP PROCEDURE IF EXISTS deleteBillByCode$$
CREATE PROCEDURE deleteBillByCode ( IN deleteCode CHAR(40) ) 
BEGIN 
DELETE FROM bills
WHERE code = deleteCode;
END  $$

DROP PROCEDURE IF EXISTS makeBillLargeBill$$ 
CREATE PROCEDURE makeBillLargeBill ( IN isLargeBill CHAR(1) , IN billid MEDIUMINT ) 
BEGIN 
UPDATE bills SET is_large_bill = isLargeBill 
WHERE billid = id;
END  $$

DROP PROCEDURE IF EXISTS makeBillAppropiationBill$$ 
CREATE PROCEDURE makeBillAppropiationBill ( IN isAppropiationBill CHAR(1) , IN billid MEDIUMINT ) 
BEGIN 
UPDATE bills SET is_appropiation_bill = isAppropiationBill 
WHERE billid = id;
END  $$

DROP PROCEDURE IF EXISTS setUnapprovedOrganizationStatus$$ 
CREATE PROCEDURE setUnapprovedOrganizationStatus ( IN organization_id MEDIUMINT , IN status VARCHAR(20) ) 
BEGIN 
UPDATE unapproved_profiles SET status = status 
WHERE organization_id = organization_id;
END  $$

DROP PROCEDURE IF EXISTS setUnapprovedIndividualStatus$$ 
CREATE PROCEDURE setUnapprovedIndividualStatus ( IN individual_id MEDIUMINT , IN status VARCHAR(20) ) 
BEGIN 
UPDATE unapproved_profiles SET status = status 
WHERE individual_id = individual_id;
END  $$

DROP PROCEDURE IF EXISTS deleteUnapprovedOrganization$$
CREATE PROCEDURE deleteUnapprovedOrganization ( IN organization_id MEDIUMINT ) 
BEGIN 
DELETE FROM unapproved_profiles
WHERE organization_id = organization_id;
END  $$

DROP PROCEDURE IF EXISTS deleteUnapprovedIndividual$$
CREATE PROCEDURE deleteUnapprovedIndividual ( IN individual_id MEDIUMINT ) 
BEGIN 
DELETE FROM unapproved_profiles
WHERE individual_id = individual_id;
END  $$

DROP PROCEDURE IF EXISTS deleteAdmin$$
CREATE PROCEDURE deleteAdmin ( IN email VARCHAR(50) ) 
BEGIN 
DELETE FROM admins
WHERE email = email;
END  $$

DROP PROCEDURE IF EXISTS insertAdmin$$ 
CREATE PROCEDURE insertAdmin ( IN email VARCHAR(50) , IN password VARCHAR(128) , IN salt VARCHAR(128) ) 
BEGIN 
INSERT INTO admins (salt,email,password) VALUES (salt , email , password) ;
END $$

DROP PROCEDURE IF EXISTS updateBillVote$$ 
CREATE PROCEDURE updateBillVote ( IN billId MEDIUMINT(9) , IN reddit MEDIUMINT(9) , IN google MEDIUMINT(9) , IN facebook MEDIUMINT(9) , IN twitter MEDIUMINT(9) ) 
BEGIN 
UPDATE bill_votes SET twitter = twitter , facebook = facebook , google = google , reddit = reddit 
WHERE billId = billId;
END  $$

DROP PROCEDURE IF EXISTS insertBillVote$$ 
CREATE PROCEDURE insertBillVote ( IN billId MEDIUMINT(9) , IN reddit MEDIUMINT(9) , IN google MEDIUMINT(9) , IN facebook MEDIUMINT(9) , IN twitter MEDIUMINT(9) ) 
BEGIN 
INSERT INTO bill_votes (reddit,facebook,twitter,billId,google) VALUES (reddit , facebook , twitter , billId , google) ;
END $$

DROP PROCEDURE IF EXISTS updateBillComment$$ 
CREATE PROCEDURE updateBillComment ( IN user MEDIUMINT(9) , IN comment VARCHAR(200) , IN sub_comment VARCHAR(200) , IN comment_post_date DATE , IN sub_comment_post_date DATE ) 
BEGIN 
UPDATE comments_bills SET comment = comment , sub_comment = sub_comment , sub_comment_post_date = sub_comment_post_date , comment_post_date = comment_post_date , user = user 
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertBillComment$$ 
CREATE PROCEDURE insertBillComment ( IN user MEDIUMINT(9) , IN comment VARCHAR(200) , IN sub_comment VARCHAR(200) , IN comment_post_date DATE , IN sub_comment_post_date DATE ) 
BEGIN 
INSERT INTO comments_bills (user,comment_post_date,comment,sub_comment,sub_comment_post_date) VALUES (user , comment_post_date , comment , sub_comment , sub_comment_post_date) ;
END $$

DROP PROCEDURE IF EXISTS deleteBillComment$$
CREATE PROCEDURE deleteBillComment ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM comments_bill
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertIndividual$$ 
CREATE PROCEDURE insertIndividual ( IN first_name VARCHAR(50) , IN last_name VARCHAR(50) , IN username VARCHAR(30) , IN birthdate DATE , IN gender CHAR(1) , IN address VARCHAR(200) , IN city VARCHAR(200) , IN state VARCHAR(100) , IN zip MEDIUMINT , IN email VARCHAR(128) , IN password VARCHAR(100) , IN political_affiliation VARCHAR(30) , IN activated VARCHAR(5) , IN salt VARCHAR(128) ) 
BEGIN 
INSERT INTO individuals (zip,city,state,password,last_name,gender,first_name,email,address,username,birthdate,salt,political_affiliation,activated) VALUES (zip , city , state , password , last_name , gender , first_name , email , address , username , birthdate , salt , political_affiliation , activated) ;
END $$

DROP PROCEDURE IF EXISTS deleteIndividual$$
CREATE PROCEDURE deleteIndividual ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM individuals
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS deleteNewsItem$$
CREATE PROCEDURE deleteNewsItem ( IN title TEXT ) 
BEGIN 
DELETE FROM news
WHERE title = title;
END  $$

DROP PROCEDURE IF EXISTS insertNewsItem$$ 
CREATE PROCEDURE insertNewsItem ( IN title TEXT , IN news_url VARCHAR(100) , IN photo VARCHAR(50) , IN category VARCHAR(50) , IN category_index MEDIUMINT(9) ) 
BEGIN 
INSERT INTO news (photo,category,category_index,news_url,title) VALUES (photo , category , category_index , news_url , title) ;
END $$

DROP PROCEDURE IF EXISTS insertOrganization$$ 
CREATE PROCEDURE insertOrganization ( IN name VARCHAR(50) , IN address VARCHAR(200) , IN city VARCHAR(200) , IN state VARCHAR(100) , IN zip MEDIUMINT , IN phone VARCHAR(100) , IN legal_status VARCHAR(100) , IN cause_concerns VARCHAR(30) , IN join_reason VARCHAR(500) , IN individual_name VARCHAR(300) , IN title_in_organization VARCHAR(300) , IN personal_phone VARCHAR(20) , IN email VARCHAR(40) , IN password VARCHAR(128) , IN salt VARCHAR(128) , IN verified VARCHAR(5) , IN signup_date DATE ) 
BEGIN 
INSERT INTO organizations (zip,password,title_in_organization,join_reason,personal_phone,individual_name,email,verified,signup_date,city,cause_concerns,state,phone,name,address,legal_status,salt) VALUES (zip , password , title_in_organization , join_reason , personal_phone , individual_name , email , verified , signup_date , city , cause_concerns , state , phone , name , address , legal_status , salt) ;
END $$

DROP PROCEDURE IF EXISTS deleteOrganization$$
CREATE PROCEDURE deleteOrganization ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM organizations
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertProposal$$ 
CREATE PROCEDURE insertProposal ( IN individual_id MEDIUMINT , IN name VARCHAR(50) , IN concern VARCHAR(200) , IN category1 VARCHAR(100) , IN category2 VARCHAR(100) , IN category3 VARCHAR(100) , IN created DATE , IN verified VARCHAR(1) , IN description TEXT ) 
BEGIN 
INSERT INTO proposals (category2,category1,created,category3,individual_id,name,description,concern,verified) VALUES (category2 , category1 , created , category3 , individual_id , name , description , concern , verified) ;
END $$

DROP PROCEDURE IF EXISTS deleteProposal$$
CREATE PROCEDURE deleteProposal ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM proposals
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertReportedComment$$ 
CREATE PROCEDURE insertReportedComment ( IN submitted_by VARCHAR(100) , IN date DATE , IN relevant_bill MEDIUMINT , IN status VARCHAR(20) ) 
BEGIN 
INSERT INTO reported_comments (relevant_bill,status,submitted_by,date) VALUES (relevant_bill , status , submitted_by , date) ;
END $$

DROP PROCEDURE IF EXISTS deleteReportedComment$$
CREATE PROCEDURE deleteReportedComment ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM reported_comments
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertRepresentative$$ 
CREATE PROCEDURE insertRepresentative ( IN name 	varchar(50) , IN state 	varchar(50) , IN url 	text , IN email 	varchar(50) , IN phone 	varchar(20) , IN photo 	varchar(60) , IN chamber varchar(50) ) 
BEGIN 
INSERT INTO representatives (chamber,url,state,phone,name,photo,email) VALUES (chamber , url , state , phone , name , photo , email) ;
END $$

DROP PROCEDURE IF EXISTS deleteRepresentative$$
CREATE PROCEDURE deleteRepresentative ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM representatives
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertStaticPage$$ 
CREATE PROCEDURE insertStaticPage ( IN page_title text , IN text_blob1 text , IN text_blob2 text , IN text_blob3 text , IN text_blob4 text , IN picture1 varchar(200) , IN picture2 varchar(200) , IN picture3 varchar(200) , IN picture4 varchar(200) ) 
BEGIN 
INSERT INTO static_pages (text_blob2,picture2,text_blob4,picture4,picture3,page_title,picture1,text_blob1,text_blob3) VALUES (text_blob2 , picture2 , text_blob4 , picture4 , picture3 , page_title , picture1 , text_blob1 , text_blob3) ;
END $$

DROP PROCEDURE IF EXISTS deleteStaticPage$$
CREATE PROCEDURE deleteStaticPage ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM static_pages
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertUserVote$$ 
CREATE PROCEDURE insertUserVote ( IN billId MEDIUMINT(9) , IN user_id MEDIUMINT(9) , IN organization_id MEDIUMINT(9) , IN vote varchar(200) , IN date DATE ) 
BEGIN 
INSERT INTO user_votes (vote,user_id,date,billId,organization_id) VALUES (vote , user_id , date , billId , organization_id) ;
END $$

DROP PROCEDURE IF EXISTS deleteUserVote$$
CREATE PROCEDURE deleteUserVote ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM user_votes
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS insertWallOfAmerica$$ 
CREATE PROCEDURE insertWallOfAmerica ( IN user MEDIUMINT , IN date DATE , IN dream VARCHAR(200) , IN wish VARCHAR(200) ) 
BEGIN 
INSERT INTO wall_of_america (date,dream,user,wish) VALUES (date , dream , user , wish) ;
END $$

DROP PROCEDURE IF EXISTS deleteWallOfAmericaEntry$$
CREATE PROCEDURE deleteWallOfAmericaEntry ( IN id MEDIUMINT(9) ) 
BEGIN 
DELETE FROM wall_of_america
WHERE id = id;
END  $$

DROP PROCEDURE IF EXISTS getUserVote$$
CREATE PROCEDURE getUserVote ( IN userId MEDIUMINT(9) ) 
BEGIN 
SELECT billId,user_id,organization_id,vote,date FROM user_votes
WHERE userId = user_id;
END  $$

DROP PROCEDURE IF EXISTS getOrganizationVote$$
CREATE PROCEDURE getOrganizationVote ( IN organizationId MEDIUMINT(9) ) 
BEGIN 
SELECT billId,user_id,organization_id,vote,date FROM user_votes
WHERE organizationId = organization_id;
END  $$

DELIMITER ;
